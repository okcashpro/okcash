!(function (e) {
    "use strict";
    var t = function () {
        (this.FrameworkcrollElement = "html, body"), (this.$body = e("body")), this.setUserOS(), this.setUserAgent();
    };
    (t.prototype.setUserOS = function () {
        var e = "";
        navigator.appVersion.indexOf("Win") != -1 && (e = "windows"),
            navigator.appVersion.indexOf("Mac") != -1 && (e = "mac"),
            navigator.appVersion.indexOf("X11") != -1 && (e = "unix"),
            navigator.appVersion.indexOf("Linux") != -1 && (e = "linux"),
            this.$body.addClass(e);
    }),
        (t.prototype.setUserAgent = function () {
            navigator.userAgent.match(/Android|BlackBerry|iPhone|iPad|iPod|Opera Mini|IEMobile/i) ? this.$body.addClass("mobile") : (this.$body.addClass("desktop"), navigator.userAgent.match(/MSIE 9.0/) && this.$body.addClass("ie9"));
        }),
        (t.prototype.isVisibleXs = function () {
            return !e("#pg-visible-xs").length && this.$body.append('<div id="pg-visible-xs" class="visible-xs" />'), e("#pg-visible-xs").is(":visible");
        }),
        (t.prototype.isVisibleSm = function () {
            return !e("#pg-visible-sm").length && this.$body.append('<div id="pg-visible-sm" class="visible-sm" />'), e("#pg-visible-sm").is(":visible");
        }),
        (t.prototype.isVisibleMd = function () {
            return !e("#pg-visible-md").length && this.$body.append('<div id="pg-visible-md" class="visible-md" />'), e("#pg-visible-md").is(":visible");
        }),
        (t.prototype.isVisibleLg = function () {
            return !e("#pg-visible-lg").length && this.$body.append('<div id="pg-visible-lg" class="visible-lg" />'), e("#pg-visible-lg").is(":visible");
        }),
        (t.prototype.getUserAgent = function () {
            return e("body").hasClass("mobile") ? "mobile" : "desktop";
        }),
        (t.prototype.getColor = function (t, i) {
            i = parseFloat(i) || 1;
            var s = e(".pg-colors").length ? e(".pg-colors") : e('<div class="pg-colors"></div>').appendTo("body"),
                n = s.find('[data-color="' + t + '"]').length ? s.find('[data-color="' + t + '"]') : e('<div class="bg-' + t + '" data-color="' + t + '"></div>').appendTo(s),
                t = n.css("background-color"),
                o = t.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/),
                a = "rgba(" + o[1] + ", " + o[2] + ", " + o[3] + ", " + i + ")";
            return a;
        }),
        (t.prototype.initSidebar = function () {
            e('[data-framework="sidebar"]').each(function () {
                var t = e(this);
                t.sidebar(t.data());
            });
        }),
        (t.prototype.initDropDown = function () {
            e(".dropdown-default").each(function () {
                var t = e(this).find(".dropdown-menu").siblings(".dropdown-toggle"),
                    i = 0,
                    s = (t.actual("innerWidth") - t.actual("width"), e(this).find(".dropdown-menu").actual("outerWidth"));
                t.actual("outerWidth") < s ? (t.width(s - i), e(this).find(".dropdown-menu").width(t.actual("outerWidth"))) : e(this).find(".dropdown-menu").width(t.actual("outerWidth"));
            });
        }),
        (t.prototype.initFormGroupDefault = function () {
            e(".form-group.form-group-default").click(function () {
                e(this).find("input").focus();
            }),
                e("body").on("focus", ".form-group.form-group-default :input", function () {
                    e(".form-group.form-group-default").removeClass("focused"), e(this).parents(".form-group").addClass("focused");
                }),
                e("body").on("blur", ".form-group.form-group-default :input", function () {
                    e(this).parents(".form-group").removeClass("focused"), e(this).val() ? e(this).closest(".form-group").find("label").addClass("fade") : e(this).closest(".form-group").find("label").removeClass("fade");
                }),
                e(".form-group.form-group-default .checkbox, .form-group.form-group-default .radio").hover(
                    function () {
                        e(this).parents(".form-group").addClass("focused");
                    },
                    function () {
                        e(this).parents(".form-group").removeClass("focused");
                    }
                );
        }),
        (t.prototype.initView = function () {
            e('[data-navigate="view"]').on("click", function (t) {
                t.preventDefault();
                var i = e(this).attr("data-view-port");
                return null != e(this).attr("data-toggle-view") && (e(i).children().last().children(".view").hide(), e(e(this).attr("data-toggle-view")).show()), e(i).toggleClass(e(this).attr("data-view-animation")), !1;
            });
        }),
        (t.prototype.initScrollBarPlugin = function () {
            e.fn.scrollbar && e(".scrollable").scrollbar({ ignoreOverlay: !1 });
        }),
        (t.prototype.init = function () {
            this.initSidebar(), this.initDropDown(), this.initFormGroupDefault(), this.initScrollBarPlugin(), this.initView();
        }),
        (e.Framework = new t()),
        (e.Framework.Constructor = t);
})(window.jQuery),
    (function (e) {
        "use strict";
        function t(e, t) {
            if (!e) return !1;
            for (var i = e.target || e.srcElement || e || !1; i && i != t; ) i = i.parentNode || !1;
            return i !== !1;
        }
        function i(e, t) {
            for (var i in t) t.hasOwnProperty(i) && (e[i] = t[i]);
            return e;
        }
        function s(e, t) {
            (this.el = e), (this.options = i({}, this.options)), i(this.options, t), this._init();
        }
        function n(e, t) {
            for (var i = e.matches || e.webkitMatchesSelector || e.mozMatchesSelector || e.msMatchesSelector; e; ) {
                if (i.bind(e)(t)) return e;
                e = e.parentElement;
            }
            return !1;
        }
        function o(t) {
            return { left: t.getBoundingClientRect().left + e.pageXOffset - t.ownerDocument.documentElement.clientLeft, top: t.getBoundingClientRect().top + e.pageYOffset - t.ownerDocument.documentElement.clientTop };
        }
        function a(e, t) {
            t.parentNode.insertBefore(e, t.nextSibling);
        }
        (s.prototype.options = {
            newTab: !0,
            stickyPlaceholder: !0,
            container: "body",
            onChange: function (e) {
                console.log(e);
                var t = document.createEvent("HTMLEvents");
                t.initEvent("change", !0, !1), e.dispatchEvent(t);
            },
        }),
            (s.prototype._init = function () {
                var e = this.el.querySelector("option[selected]");
                (this.hasDefaultPlaceholder = e && e.disabled),
                    (this.selectedOpt = e || this.el.querySelector("option")),
                    this._createSelectEl(),
                    (this.selOpts = [].slice.call(this.selEl.querySelectorAll("li[data-option]"))),
                    (this.selOptsCount = this.selOpts.length),
                    (this.current = this.selOpts.indexOf(this.selEl.querySelector("li.cs-selected")) || -1),
                    (this.selPlaceholder = this.selEl.querySelector("span.cs-placeholder")),
                    this._initEvents(),
                    (this.el.onchange = function () {
                        var e = this.selectedIndex,
                            t = this.children[e].innerHTML.trim();
                        console.log(t);
                    });
            }),
            (s.prototype._createSelectEl = function () {
                var e = "",
                    t = function (e) {
                        var t = "",
                            i = "",
                            s = "";
                        return (
                            !e.selectedOpt || this.foundSelected || this.hasDefaultPlaceholder || ((i += "cs-selected "), (this.foundSelected = !0)),
                            e.getAttribute("data-class") && (i += e.getAttribute("data-class")),
                            e.getAttribute("data-link") && (s = "data-link=" + e.getAttribute("data-link")),
                            "" !== i && (t = 'class="' + i + '" '),
                            "<li " + t + s + ' data-option data-value="' + e.value + '"><span>' + e.textContent + "</span></li>"
                        );
                    };
                [].slice.call(this.el.children).forEach(function (i) {
                    if (!i.disabled) {
                        var s = i.tagName.toLowerCase();
                        "option" === s
                            ? (e += t(i))
                            : "optgroup" === s &&
                              ((e += '<li class="cs-optgroup"><span>' + i.label + "</span><ul>"),
                              [].slice.call(i.children).forEach(function (i) {
                                  e += t(i);
                              }),
                              (e += "</ul></li>"));
                    }
                });
                var i = '<div class="cs-options"><ul>' + e + "</ul></div>";
                (this.selEl = document.createElement("div")),
                    (this.selEl.className = this.el.className),
                    (this.selEl.tabIndex = this.el.tabIndex),
                    (this.selEl.innerHTML = '<span class="cs-placeholder">' + this.selectedOpt.textContent + "</span>" + i),
                    this.el.parentNode.appendChild(this.selEl),
                    this.selEl.appendChild(this.el);
                var s = document.createElement("div");
                (s.className = "cs-backdrop"), this.selEl.appendChild(s);
            }),
            (s.prototype._initEvents = function () {
                var e = this;
                this.selPlaceholder.addEventListener("click", function () {
                    e._toggleSelect();
                }),
                    this.selOpts.forEach(function (t, i) {
                        t.addEventListener("click", function () {
                            (e.current = i), e._changeOption(), e._toggleSelect();
                        });
                    }),
                    document.addEventListener("click", function (i) {
                        var s = i.target;
                        e._isOpen() && s !== e.selEl && !t(s, e.selEl) && e._toggleSelect();
                    }),
                    this.selEl.addEventListener("keydown", function (t) {
                        var i = t.keyCode || t.which;
                        switch (i) {
                            case 38:
                                t.preventDefault(), e._navigateOpts("prev");
                                break;
                            case 40:
                                t.preventDefault(), e._navigateOpts("next");
                                break;
                            case 32:
                                t.preventDefault(), e._isOpen() && "undefined" != typeof e.preSelCurrent && e.preSelCurrent !== -1 && e._changeOption(), e._toggleSelect();
                                break;
                            case 13:
                                t.preventDefault(), e._isOpen() && "undefined" != typeof e.preSelCurrent && e.preSelCurrent !== -1 && (e._changeOption(), e._toggleSelect());
                                break;
                            case 27:
                                t.preventDefault(), e._isOpen() && e._toggleSelect();
                        }
                    });
            }),
            (s.prototype._navigateOpts = function (e) {
                this._isOpen() || this._toggleSelect();
                var t = "undefined" != typeof this.preSelCurrent && this.preSelCurrent !== -1 ? this.preSelCurrent : this.current;
                (("prev" === e && t > 0) || ("next" === e && t < this.selOptsCount - 1)) && ((this.preSelCurrent = "next" === e ? t + 1 : t - 1), this._removeFocus(), classie.add(this.selOpts[this.preSelCurrent], "cs-focus"));
            }),
            (s.prototype._toggleSelect = function () {
                var e = this.selEl.querySelector(".cs-backdrop"),
                    t = document.querySelector(this.options.container),
                    i = t.querySelector(".dropdown-mask"),
                    s = this.selEl.querySelector(".cs-options"),
                    r = this.selEl.querySelector(".cs-placeholder"),
                    l = r.offsetWidth,
                    d = r.offsetHeight,
                    c = s.scrollWidth;
                if (this._isOpen()) {
                    this.current !== -1 && (this.selPlaceholder.textContent = this.selOpts[this.current].textContent);
                    var u = this.selEl.data,
                        h = u.parentNode;
                    a(this.selEl, u), this.selEl.removeAttribute("style"), h.removeChild(u);
                    this.selEl.clientHeight;
                    (e.style.transform = e.style.webkitTransform = e.style.MozTransform = e.style.msTransform = e.style.OTransform = "scale3d(1,1,1)"),
                        classie.remove(this.selEl, "cs-active"),
                        (i.style.display = "none"),
                        (s.style.overflowY = "hidden"),
                        (s.style.width = "auto");
                    var p = n(this.selEl, ".form-group");
                    p && classie.removeClass(p, "focused");
                } else {
                    this.hasDefaultPlaceholder && this.options.stickyPlaceholder && (this.selPlaceholder.textContent = this.selectedOpt.textContent);
                    var u;
                    this.selEl.parentNode.querySelector(".dropdown-placeholder")
                        ? (u = this.selEl.parentNode.querySelector(".dropdown-placeholder"))
                        : ((u = document.createElement("div")), classie.add(u, "dropdown-placeholder"), a(u, this.selEl)),
                        (u.style.height = d + "px"),
                        (u.style.width = this.selEl.offsetWidth + "px"),
                        (this.selEl.data = u),
                        (this.selEl.style.position = "absolute");
                    var f = o(this.selEl);
                    (this.selEl.style.left = f.left + "px"), (this.selEl.style.top = f.top + "px"), t.appendChild(this.selEl);
                    var v = s.offsetHeight,
                        g = r.offsetHeight,
                        b = (s.offsetWidth, r.offsetWidth, v / g);
                    (e.style.transform = e.style.webkitTransform = e.style.MozTransform = e.style.msTransform = e.style.OTransform = "scale3d(1, " + b + ", 1)"),
                        i || ((i = document.createElement("div")), classie.add(i, "dropdown-mask"), t.appendChild(i)),
                        (i.style.display = "block"),
                        classie.add(this.selEl, "cs-active");
                    var m = l < c ? c : l;
                    (this.selEl.style.width = m + "px"),
                        (this.selEl.style.height = g + "px"),
                        (s.style.width = "100%"),
                        setTimeout(function () {
                            s.style.overflowY = "auto";
                        }, 300);
                }
            }),
            (s.prototype._changeOption = function () {
                "undefined" != typeof this.preSelCurrent && this.preSelCurrent !== -1 && ((this.current = this.preSelCurrent), (this.preSelCurrent = -1));
                var t = this.selOpts[this.current];
                (this.selPlaceholder.textContent = t.textContent), (this.el.value = t.getAttribute("data-value"));
                var i = this.selEl.querySelector("li.cs-selected");
                i && classie.remove(i, "cs-selected"),
                    classie.add(t, "cs-selected"),
                    t.getAttribute("data-link") && (this.options.newTab ? e.open(t.getAttribute("data-link"), "_blank") : (e.location = t.getAttribute("data-link"))),
                    this.options.onChange(this.el);
            }),
            (s.prototype._isOpen = function (e) {
                return classie.has(this.selEl, "cs-active");
            }),
            (s.prototype._removeFocus = function (e) {
                var t = this.selEl.querySelector("li.cs-focus");
                t && classie.remove(t, "cs-focus");
            }),
            (e.SelectFx = s);
    })(window),
    (function (e) {
        "use strict";
        function t(t) {
            return this.each(function () {
                var s = e(this),
                    n = s.data("pg.quickview"),
                    o = "object" == typeof t && t;
                n || s.data("pg.quickview", (n = new i(this, o))), "string" == typeof t && n[t]();
            });
        }
        var i = function (t, i) {
            (this.$element = e(t)), (this.options = e.extend(!0, {}, e.fn.quickview.defaults, i)), (this.bezierEasing = [0.05, 0.74, 0.27, 0.99]);
            var s = this;
            e(this.options.notes).on("click", ".list > ul > li", function (t) {
                var i = e(this).find(".note-preview"),
                    i = e(this).find(".note-preview");
                e(s.options.noteEditor).html(i.html()), e(s.options.notes).toggleClass("push");
            }),
                e(this.options.notes).on("click", ".list > ul > li .checkbox", function (e) {
                    e.stopPropagation();
                }),
                e(this.options.notes).on("click", s.options.backButton, function (t) {
                    e(s.options.notes).find(".toolbar > li > a").removeClass("active"), e(s.options.notes).toggleClass("push");
                }),
                e(this.options.deleteNoteButton).click(function (t) {
                    t.preventDefault(), e(this).toggleClass("selected"), e(s.options.notes).find(".list > ul > li .checkbox").fadeToggle("fast"), e(s.options.deleteNoteConfirmButton).fadeToggle("fast").removeClass("hide");
                }),
                e(this.options.newNoteButton).click(function (t) {
                    t.preventDefault(), e(s.options.noteEditor).html("");
                }),
                e(this.options.deleteNoteConfirmButton).click(function () {
                    var t = e(s.options.notes).find("input[type=checkbox]:checked");
                    t.each(function () {
                        e(this).parents("li").remove();
                    });
                }),
                e(this.options.notes).on("click", ".toolbar > li > a", function (t) {
                    var i = e(this).attr("data-action");
                    document.execCommand(i, !1, null), e(this).toggleClass("active");
                });
        };
        i.VERSION = "1.0.0";
        var s = e.fn.quickview;
        (e.fn.quickview = t),
            (e.fn.quickview.Constructor = i),
            (e.fn.quickview.defaults = {
                notes: "#note-views",
                alerts: "#alerts",
                chat: "#chat",
                notesList: ".list",
                noteEditor: ".quick-note-editor",
                deleteNoteButton: ".delete-note-link",
                deleteNoteConfirmButton: ".btn-remove-notes",
                newNoteButton: ".new-note-link",
                backButton: ".close-note-link",
            }),
            (e.fn.quickview.noConflict = function () {
                return (e.fn.quickview = s), this;
            }),
            e(window).on("load", function () {
                e('[data-framework="quickview"]').each(function () {
                    var t = e(this);
                    t.quickview(t.data());
                });
            }),
            e(document).on("click.pg.quickview.data-api touchstart", '[data-toggle="quickview"]', function (t) {
                var i = e(this).attr("data-toggle-element");
                if (Modernizr.csstransitions) {
                    var s = this.click.bind(this),
                        n = function (t) {
                            return (t = t || event), !!e.contains(e(i)[0], t.target) || (e(document).off(t), void s());
                        };
                    e(i).toggleClass("open").hasClass("open") ? e(document).on("click.pg.quickview.hide", n) : e(document).off("click.pg.quickview.hide");
                } else {
                    var o = e(i).width();
                    e(i).hasClass("open-ie")
                        ? e(i)
                              .stop()
                              .animate({ right: 0 }, 400, e.bez([0.05, 0.74, 0.27, 0.99]), function () {
                                  e(i).removeClass("open-ie");
                              })
                        : e(i)
                              .stop()
                              .animate({ right: -1 * o }, 400, e.bez([0.05, 0.74, 0.27, 0.99]), function () {
                                  e(i).addClass("open-ie");
                              });
                }
                t.preventDefault();
            });
    })(window.jQuery),
    (function (e) {
        "use strict";
        function t(t) {
            return this.each(function () {
                var s = e(this),
                    n = s.data("pg.sidebar"),
                    o = "object" == typeof t && t;
                n || s.data("pg.sidebar", (n = new i(this, o))), "string" == typeof t && n[t]();
            });
        }
        var i = function (t, i) {
            function s(t) {
                return (
                    !e.Framework.isVisibleSm() &&
                    !e.Framework.isVisibleXs() &&
                    void (
                        e(".close-sidebar").data("clicked") ||
                        o.$body.hasClass("menu-pin") ||
                        (o.cssAnimation
                            ? (o.$element.css({ transform: o.menuOpenCSS }), o.$body.addClass("sidebar-visible"), e("#sidebar-header-collapsed").removeClass("sidebar-header-collapsed-visible"))
                            : o.$element.stop().animate({ left: "0px" }, 400, e.bez(o.bezierEasing), function () {
                                  o.$body.addClass("sidebar-visible"), e("#sidebar-header-collapsed").removeClass("sidebar-header-collapsed-visible");
                              }))
                    )
                );
            }
            function n(t) {
                if (e.Framework.isVisibleSm() || e.Framework.isVisibleXs()) return !1;
                if ("undefined" != typeof t) {
                    var i = e(t.target);
                    if (i.parent(".page-sidebar").length) return;
                }
                o.$body.hasClass("menu-pin") ||
                    (e(".sidebar-overlay-slide").hasClass("show") && (e(".sidebar-overlay-slide").removeClass("show"), e("[data-framework-toggle']").removeClass("active")),
                    o.cssAnimation
                        ? (o.$element.css({ transform: o.menuClosedCSS }), o.$body.removeClass("sidebar-visible"), e("#sidebar-header-collapsed").addClass("sidebar-header-collapsed-visible"))
                        : o.$element.stop().animate({ left: "-" + o.sideBarWidthCondensed + "px" }, 400, e.bez(o.bezierEasing), function () {
                              o.$body.removeClass("sidebar-visible"),
                                  e("#sidebar-header-collapsed").addClass("sidebar-header-collapsed-visible"),
                                  setTimeout(function () {
                                      e(".close-sidebar").data({ clicked: !1 });
                                  }, 100);
                          }));
            }
            if (
                ((this.$element = e(t)),
                (this.options = e.extend(!0, {}, e.fn.sidebar.defaults, i)),
                (this.bezierEasing = [0.05, 0.74, 0.27, 0.99]),
                (this.cssAnimation = !0),
                this.menuClosedCSS,
                this.menuOpenCSS,
                (this.css3d = !0),
                (this.sideBarWidth = 280),
                (this.sideBarWidthCondensed = 210),
                (this.$sidebarMenu = this.$element.find(".sidebar-menu > ul")),
                (this.$pageContainer = e(this.options.pageContainer)),
                (this.$body = e("body")),
                this.$sidebarMenu.length)
            ) {
                "desktop" == e.Framework.getUserAgent() && this.$sidebarMenu.scrollbar({ ignoreOverlay: !1 }),
                    Modernizr.csstransitions || (this.cssAnimation = !1),
                    Modernizr.csstransforms3d || (this.css3d = !1),
                    (this.menuOpenCSS = 1 == this.css3d ? "translate3d(" + this.sideBarWidthCondensed + "px, 0,0)" : "translate(" + this.sideBarWidthCondensed + "px, 0)"),
                    (this.menuClosedCSS = 1 == this.css3d ? "translate3d(0, 0,0)" : "translate(0, 0)"),
                    e("body").on("click", ".sidebar-menu a", function (t) {
                        if (e(this).parent().children(".sub-menu") !== !1) {
                            var i = e(this).parent().parent();
                            e(this).parent();
                            i.children("li.open").children("a").children(".arrow").removeClass("open"),
                                i.children("li.open").children("a").children(".arrow").removeClass("active"),
                                i
                                    .children("li.open")
                                    .children(".sub-menu")
                                    .slideUp(200, function () {}),
                                i.children("li").removeClass("open");
                            var s = e(this).parent().children(".sub-menu");
                            s.is(":visible")
                                ? (e(".arrow", e(this)).removeClass("open"),
                                  s.slideUp(200, function () {
                                      e(this).parent().removeClass("active");
                                  }))
                                : (e(".arrow", e(this)).addClass("open"), e(this).parent().addClass("open"), s.slideDown(200, function () {}));
                        }
                    }),
                    e(".sidebar-slide-toggle").on("click touchend", function (t) {
                        t.preventDefault(), e(this).toggleClass("active");
                        var i = e(this).attr("data-framework-toggle");
                        null != i && e(i).toggleClass("show");
                    });
                var o = this;
                this.$element.bind("mouseenter mouseleave", s), this.$pageContainer.bind("mouseover", n);
            }
        };
        (i.prototype.toggleSidebar = function (t) {
            var i,
                s = e("body").css("background-color");
            e(".page-container").css("background-color", s),
                this.$body.hasClass("sidebar-open")
                    ? (this.$body.removeClass("sidebar-open"),
                      (i = setTimeout(
                          function () {
                              this.$element.removeClass("visible");
                          }.bind(this),
                          400
                      )))
                    : (clearTimeout(i),
                      this.$element.addClass("visible"),
                      setTimeout(
                          function () {
                              this.$body.addClass("sidebar-open");
                          }.bind(this),
                          10
                      ),
                      setTimeout(function () {
                          e(".page-container").css({ "background-color": "" });
                      }, 1e3));
        }),
            (i.prototype.togglePinSidebar = function (e) {
                "hide" == e ? this.$body.removeClass("menu-pin") : "show" == e ? this.$body.addClass("menu-pin") : this.$body.toggleClass("menu-pin");
            });
        var s = e.fn.sidebar;
        (e.fn.sidebar = t),
            (e.fn.sidebar.Constructor = i),
            (e.fn.sidebar.defaults = { pageContainer: ".page-container" }),
            (e.fn.sidebar.noConflict = function () {
                return (e.fn.sidebar = s), this;
            }),
            e(document).on("click.pg.sidebar.data-api", '[data-toggle-pin="sidebar"]', function (t) {
                t.preventDefault();
                var i = (e(this), e('[data-framework="sidebar"]'));
                return i.data("pg.sidebar").togglePinSidebar(), !1;
            }),
            e(document).on("click.pg.sidebar.data-api touchstart", '[data-toggle="sidebar"]', function (t) {
                t.preventDefault();
                var i = (e(this), e('[data-framework="sidebar"]'));
                return i.data("pg.sidebar").toggleSidebar(), !1;
            });
    })(window.jQuery),
    (function (e) {
        "use strict";
        "undefined" == typeof angular && e.Framework.init();
    })(window.jQuery);
