Copyright (c) 2014-2023 Okcash Developers
Copyright (c) 2014 BlackCoin Developers
Copyright (c) 2013-2014 NovaCoin Developers
Copyright (c) 2012-2013 PPCoin Developers
Copyright (c) 2009-2012 Bitcoin Developers

Distributed under the MIT/X11 software license, see the accompanying
file license.txt or http://www.opensource.org/licenses/mit-license.php.
This product includes software developed by the OpenSSL Project for use in
the OpenSSL Toolkit (http://www.openssl.org/).  This product includes
cryptographic software written by Eric Young (eay@cryptsoft.com) and UPnP
software written by Thomas Bernard.


UNIX BUILD NOTES
================

To Build
--------

Dependencies
------------

 Library     Purpose           Description
 -------     -------           -----------
 libssl      SSL Support       Secure communications
 libdb       Berkeley DB       Blockchain & wallet storage
 libboost    Boost             C++ Library
 miniupnpc   UPnP Support      Optional firewall-jumping support
 libqrencode QRCode generation Optional QRCode generation

Note that libexecinfo should be installed, if you are building under *BSD systems. 
This library provides a backtrace facility.

miniupnpc may be used for UPnP port mapping.  It can be downloaded from
http://miniupnp.tuxfamily.org/files/.  UPnP support is compiled in and
turned off by default.  Set USE_UPNP to a different value to control this:
 USE_UPNP=-    No UPnP support - miniupnp not required
 USE_UPNP=0    (the default) UPnP support turned off by default at runtime
 USE_UPNP=1    UPnP support turned on by default at runtime

libqrencode may be used for QRCode image generation. It can be downloaded
from http://fukuchi.org/works/qrencode/index.html.en, or installed via
your package manager. Set USE_QRCODE to control this:
 USE_QRCODE=0   (the default) No QRCode support - libqrcode not required
 USE_QRCODE=1   QRCode support enabled

Licenses of statically linked libraries:
 Berkeley DB   New BSD license with additional requirement that linked
               software must be free open source
 Boost         MIT-like license
 miniupnpc     New (3-clause) BSD license

Deps Versions used in this release:
 GCC           4.9.0
 OpenSSL       1.0.2r
 Berkeley DB   4.8.30NC
 Boost         1.70.0
 miniupnpc     1.9.20140401

Dependency Build Instructions: Ubuntu 20
-------------------------------------

Build and Install okcashd node ubuntu 20 #headless

// Install libssl1.0-dev

sudo nano /etc/apt/sources.list
deb http://security.ubuntu.com/ubuntu bionic-security main
//If it does not work, do this next line too; otherwise, there is no need.
// sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3B4FE6ACC0B21F32
sudo apt update && apt-cache policy libssl1.0-dev
sudo apt-get install libssl1.0-dev

//Install deps for okcashd node

sudo apt-get install unzip pwgen git -y

sudo apt-get install build-essential libboost-all-dev libqrencode-dev libminiupnpc-dev -y

//Build and Install db4.8.30

wget http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz

tar -xzvf db-4.8.30.NC.tar.gz

sed -i 's/__atomic_compare_exchange/__atomic_compare_exchange_db/g' db-4.8.30.NC/dbinc/atomic.h

cd db-4.8.30.NC/build_unix

../dist/configure --enable-cxx --disable-shared --with-pic 

make

sudo make install

//Use db4.8.30 variables

export BDB_PREFIX="/usr/local/BerkeleyDB.4.8"

export BDB_INCLUDE_PATH="/usr/local/BerkeleyDB.4.8/include"

export BDB_LIB_PATH="/usr/local/BerkeleyDB.4.8/lib"

export CPATH="/usr/local/BerkeleyDB.4.8/include"

export LIBRARY_PATH="/usr/local/BerkeleyDB.4.8/lib"

//Clone Okcash and apply the patch for ubuntu 20

git clone https://github.com/okcashpro/okcash

cd okcash/oktools/ubuntu20

chmod +x *

./1patchu20.sh

cd

cd okcash

cd src

make -f makefile.unix USE_UPNP=-

strip okcashd

sudo cp okcashd /usr/local/bin

//Make config file

cd okcash/oktools/ubuntu2004/

./startconfig.sh

//If you want to have a full tx node, go to okcash.conf and remove # from txindex=1

//Build the full graphical client for Okcash
//Do these steps after building the okcashd node from the previous instructions file.

sudo apt-get install qtcreator qttools5-dev-tools  libqt5webkit5-dev qt5-default

cd okcash

qmake

make

strip okcash

//Install okcash in the system

sudo cp okcash /usr/local/bin

//Now Okcash graphical client is installed in the system

//END

Dependency Build Instructions: Ubuntu 16/18 & Debian
----------------------------------------------

Install dependencies:

Ubuntu <= 16.04

sudo apt-get install build-essential libssl-dev libboost-all-dev libqrencode-dev libminiupnpc-dev

Ubuntu >= 18.04

sudo apt-get install git build-essential libssl-dev libboost-all-dev libqrencode-dev libminiupnpc-dev -y

sudo apt-get install libssl1.0-dev -y

sudo add-apt-repository -y ppa:bitcoin/bitcoin

sudo apt-get update

sudo apt-get install -y libdb4.8-dev libdb4.8++-dev

Compile okcashd (no UPnP support):

cd okcash/src/
make -f makefile.unix USE_UPNP=-
strip okcashd

If using Boost 1.37, append -mt to the boost libraries in the makefile.

Dependency Build Instructions: Gentoo
-------------------------------------

emerge -av1 --noreplace boost openssl sys-libs/db

Take the following steps to build (no UPnP support):
 cd ${OKCASH_DIR}/src
 make -f makefile.unix USE_UPNP=
 strip okcashd


Notes
-----
The release is built with GCC and then "strip okcashd" to strip the debug
symbols, which reduces the executable size by about 90%.


miniupnpc
---------
tar -xzvf miniupnpc-1.6.tar.gz
cd miniupnpc-1.6
make
sudo su
make install


Berkeley DB
-----------
You need Berkeley DB. If you have to build Berkeley DB yourself:
../dist/configure --enable-cxx
make


Boost
-----
If you need to build Boost yourself:
sudo su
./bootstrap.sh
./bjam install


Security
--------
To help make your okcash installation more secure by making certain attacks impossible to
exploit even if a vulnerability is found, you can take the following measures:

* Position Independent Executable
    Build position independent code to take advantage of Address Space Layout Randomization
    offered by some kernels. An attacker who is able to cause execution of code at an arbitrary
    memory location is thwarted so they don't know where anything useful is located.
    The stack and heap are randomly located by default but this allows the code section to be
    randomly located as well.

    On an Amd64 processor where a library was not compiled with -fPIC, this will cause an error
    such as: "relocation R_X86_64_32 against `......' can not be used when making a shared object;"

    To build with PIE, use:
    make -f makefile.unix ... -e PIE=1

    To test that you have built PIE executable, install scanelf, part of paxutils, and use:
    scanelf -e ./okcash

    The output should contain:
     TYPE
    ET_DYN

* Non-executable Stack
    If the stack is executable then trivial stack based buffer overflow exploits are possible if
    vulnerable buffers are found. By default, okcash should be built with a non-executable stack
    but if one of the libraries it uses asks for an executable stack or someone makes a mistake
    and uses a compiler extension which requires an executable stack, it will silently build an
    executable without the non-executable stack protection.

    To verify that the stack is non-executable after compiling use:
    scanelf -e ./okcash

    the output should contain:
    STK/REL/PTL
    RW- R-- RW-

    The STK RW- means that the stack is readable and writeable but not executable.
